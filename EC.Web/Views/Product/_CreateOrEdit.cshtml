@model EC.Model.Product

@* This partial view defines form fields that will appear when creating and editing entities *@


<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript">
    //get file size
    function GetFileSize(fileid) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }
            return fileSize;
        }
        catch (e) {
            alert("Error is :" + e);
        }
    }

    //get file path from client system
    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);
        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }

    $("#btnSubmit").live("click", function () {
        if ($('#fileToUpload').val() == "") {
            $("#spanfile").html("Please upload file");
            return false;
        }
        else {
            checkfile();

        }
    });

    function checkfile() {
        var file = getNameFromPath($("#fileToUpload").val());
        if (file != null) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            // alert(extension);
            switch (extension) {
                case 'jpg':
                    flag = true;
                    break;
                case 'png':
                    flag = true;
                    break;
                case 'gif':
                    flag = true;
                    break;
                default:
                    flag = false;
            }
        }
        if (flag == false) {
            $("#spanfile").text("You can upload only jpg,png,gif extension file");
            return false;
        }
        else {
            var size = GetFileSize('fileToUpload');
            if (size > 2) {
                $("#spanfile").text("You can upload file up to 2 MB");
                return false;
            }
            else {
                $("#spanfile").text("");
            }
        }
    }

    $(function () {
        $("#fileToUpload").change(function () {
            checkfile();
        });
    });
    function submitForm() {
        var fd = new FormData(document.getElementById("fileinfo"));
        fd.append("label", "WEBUPLOAD");
        $.ajax({
            url: "upload.php",
            type: "POST",
            data: fd,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false   // tell jQuery not to set contentType
        }).done(function (data) {
            console.log("PHP Output:");
            console.log(data);
        });
        return false;
    }

    $("#uploadEditorImage").change(function () {
        var data = new FormData();
        var files = $("#uploadEditorImage").get(0).files;
        if (files.length > 0) {
            data.append("HelpSectionImages", files[0]);
        }
        $.ajax({
            url: resolveUrl("~/Admin/HelpSection/AddTextEditorImage/"),
            type: "POST",
            processData: false,
            contentType: false,
            data: data,
            success: function (response) {
                //code after success

            },
            error: function (er) {
                alert(er);
            }

        });
    });
</script>


<fieldset>
    <legend>Product Basic Information</legend>
    <table class="table">
        <tr>
            <td>
                @Html.LabelFor(model => model.Name)
            </td>
            <td>
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.FullDescription)
            </td>
            <td>
                @Html.EditorFor(model => model.FullDescription)
                @Html.ValidationMessageFor(model => model.FullDescription)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.UnitPrice)
            </td>

            <td>
                @Html.EditorFor(model => model.UnitPrice)
                @Html.ValidationMessageFor(model => model.UnitPrice)
            </td>
        </tr>


        <tr>
            <td>
                @Html.LabelFor(model => model.StockQuantity)
            </td>
            <td>
                @Html.EditorFor(model => model.StockQuantity)
                @Html.ValidationMessageFor(model => model.StockQuantity)
            </td>
        </tr>


        <tr>
            <td>
                @Html.LabelFor(model => model.BookQty)
            </td>
            <td>
                @Html.EditorFor(model => model.BookQty)
                @Html.ValidationMessageFor(model => model.BookQty)
            </td>
        </tr>


        <tr>
            <td>
                @Html.LabelFor(model => model.LockQty)
            </td>
            <td>
                @Html.EditorFor(model => model.LockQty)
                @Html.ValidationMessageFor(model => model.LockQty)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(model => model.MetaKeywords)
            </td>
            <td>
                @Html.EditorFor(model => model.MetaKeywords)
                @Html.ValidationMessageFor(model => model.MetaKeywords)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.MetaTitle)
            </td>
            <td>
                @Html.EditorFor(model => model.MetaTitle)
                @Html.ValidationMessageFor(model => model.MetaTitle)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.IsActive)
            </td>
            <td>
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.Published)
            </td>
            <td>
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
    </table>
</fieldset>
<fieldset>
    <legend>Images</legend>
    <input type="file" id="uploadEditorImage" />

</fieldset>


